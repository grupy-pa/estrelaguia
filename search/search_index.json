{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Estrela Guia \u2728","text":"<p>Assistente virtual astrol\u00f3gica codificada com Python e OpenAI</p> <p>Atividade para a Python Norte 2025</p>"},{"location":"#panorama-geral-da-atividade","title":"Panorama geral da atividade","text":"<ul> <li>Entender o que \u00e9 um assistente virtual</li> <li>Entender o contexto de uso de APIs de LLMs</li> <li>Utilizar a API da OpenAI com Python</li> </ul>"},{"location":"#o-que-e-inteligencia-artificial","title":"O que \u00e9 intelig\u00eancia artificial?","text":"<p>Para que possamos entender melhor como funciona um assistente, primeiro vou explicar um pouco o que \u00e9 uma Intelig\u00eancia Artificial e como essa tecnologia pode ser aplicada para constru\u00e7\u00e3o de assistentes inteligentes.</p> <p>Intelig\u00eancia artificial (IA) \u00e9 uma tecnologia que permite que computadores e m\u00e1quinas simulem o aprendizado, a compreens\u00e3o, a resolu\u00e7\u00e3o de problemas, a tomada de decis\u00f5es, a criatividade e a autonomia dos seres humanos.</p> <p>What is AI? </p> <p>Intelig\u00eancia Artificial (M\u00e1quinas pensantes)</p> <p>Esta tecnologia foi idealizada incialmente na d\u00e9cada de 1950 pelo matem\u00e1tico ingl\u00eas Alan Turing, ao propor ao mundo a cria\u00e7\u00e3o de m\u00e1quina aut\u00f4nomas capazes de realizar tarefas que se assemelham a alguns comportamento humano, como o de pensar e reagir de acordo com o ambiente. A intelig\u00eancia artifical se tornou uma das \u00e1res mais populares da computa\u00e7\u00e3o, inclusive fic\u00e7\u00e3o cienti\u00edfica como por exemplo o filme The Matrix - 1999. Atualmente as IAs j\u00e1 fazem parte do coquitiano de pessoas comuns, com a chagada do ChatGPT inaugurou-se a era das IAs modernas, tornando a tecnologia acess\u00edvel para todos.</p> <p>O Conceito de GenAI</p> <p>A IA generativa \u00e9 um tipo de intelig\u00eancia artificial capaz de criar novos conte\u00fados, como textos, imagens, m\u00fasicas, v\u00eddeos e c\u00f3digo, com base em padr\u00f5es aprendidos a partir de grandes conjuntos de dados. Em vez de apenas analisar e classificar dados, a IA generativa tem a capacidade de gerar outputs originais e criativos. </p> <p>Assistente vs Agente</p> <p>O assistente responde a solicita\u00e7\u00f5es ou comandos do usu\u00e1rio e pode recomendar a\u00e7\u00f5es, mas a tomada de decis\u00e3o \u00e9 feita pelo usu\u00e1rio.</p> <p>Os agentes de IA s\u00e3o sistemas inteligentes independentes e aut\u00f4nomos que realizam tarefas espec\u00edficas sem interven\u00e7\u00e3o humana.</p>"},{"location":"#o-que-e-e-o-que-nao-e-um-assistente-virtual","title":"O que \u00e9 e o que n\u00e3o \u00e9 um assistente virtual","text":"<p>Portando um assistente virtual \u00e9 uma IA generativa treinada com dados espec\u00edficos para auxiliar os usu\u00e1rios em tarefas de contextos espec\u00edficos. Capaz n\u00e3o somente de gerar textos, mas tamb\u00e9m de fato agir em um determinado ambiente como a web, por exemplo.</p>"},{"location":"#as-llms-modernas-e-o-conceito-de-apis-de-llms","title":"As LLMs modernas e o conceito de APIs de LLMs","text":"<p>Large Language Models (Modelo de Linguagem Grande)</p> <p>Um LLM  \u00e9 um tipo avan\u00e7ado de modelo de linguagem que \u00e9 treinado usando t\u00e9cnicas de aprendizado profundo em grandes quantidades de dados de texto.  Esses modelos s\u00e3o capazes de gerar texto semelhante ao humano e executar v\u00e1rias tarefas de Processamento de Linguagem Natural.</p> <p>O desenvolvimento de um modelo de LLM envolve a cria\u00e7\u00e3o de um projeto e a sele\u00e7\u00e3o de uma equipe especializada com habilidades em diversas \u00e1reas, al\u00e9m de um elevado custo computacional esse tipo de projeto tamb\u00e9m requer uma governan\u00e7a e seguran\u00e7a dos dados utilizados durante o treinamento e as fases de fine tuning.</p>"},{"location":"#o-conceito-de-api-de-llm","title":"O Conceito de API de LLM","text":"<p>API de LLM</p> <p>API de LLM \u00e9 um servi\u00e7o que exp\u00f5e funcionalidades de um modelo de linguagem por meio de chamadas HTTP, permitindo gerar textos, responder perguntas, traduzir, resumir, entre outras tarefas de linguagem natural.</p> <p>Treinar a sua pr\u00f3pria LLM requer uma alta capacidade computacional, em alguns casos, utilizar uma API de LLM acaba sendo uma op\u00e7\u00e3o r\u00e1pida para implementa\u00e7\u00f5es de projetos de pequeno, m\u00e9dio e grande porte.</p> <ul> <li>OpenAI</li> <li>Replicate</li> <li>Grok</li> <li>Google Gemini</li> <li>DeepSeek</li> </ul>"},{"location":"#configurando-o-ambiente-virtual-e-iniciando-projeto","title":"Configurando o ambiente virtual e iniciando projeto","text":""},{"location":"#ambiente-virtual","title":"Ambiente Virtual","text":"<pre><code>python -m venv venv\n\nvenv\\Scripts\\activate\n</code></pre>"},{"location":"#instalar-dependencias","title":"Instalar depend\u00eancias","text":"<pre><code>pip install requests beautifulsoup4 python-decouple\n</code></pre>"},{"location":"#dotenv-env","title":"Dotenv (.env)","text":"<p>\u00c9 importante que chaves de autententica\u00e7\u00e3o n\u00e3o extejam expostas diretamente no c\u00f3digo fonte.</p> <pre><code>OPENAI_API_KEY=sk-proj-aksu1i\n</code></pre>"},{"location":"#hello-world-com-python-e-openai","title":"Hello World com Python e OpenAI","text":""},{"location":"#requisitos","title":"Requisitos","text":"<p>Al\u00e9m de ter o Python instalado, \u00e9 necess\u00e1rio possuir uma chave de API da OpenAI, e adicioar um pequeno saldo para uso em testes.</p> <ul> <li>OpenAI Projects</li> </ul> <p>{:target=\"_blank\"} main.py<pre><code>import requests\nfrom decouple import config\nfrom pprint import pprint\n\nOPENAI_API_KEY = config('OPENAI_API_KEY')\n\napi_url = 'https://api.openai.com/v1'\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {OPENAI_API_KEY}'\n}\n\ndata = {\n    \"model\": \"gpt-4.1-mini\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Me conte uma piada sobre IA\"\n        }\n    ]\n}\ntry:\n\n    resp = requests.post(f'{api_url}/chat/completions', headers=headers, json=data)\n    body = resp.json()\n\n    pprint(body, indent=4)\n\nexcept Exception as e:\n    raise print(e)\n</code></pre></p>"},{"location":"#exemplo-de-resposta","title":"Exemplo de resposta","text":"<pre><code>{\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": \"None\",\n      \"message\": {\n        \"annotations\": [],\n        \"content\": \"Claro! Aqui vai uma piada sobre IA: Por que a intelig\u00eancia artificial nunca mente? Porque ela sempre prefere dar respostas *programadas \ud83d\ude04\",\n        \"refusal\": \"None\",\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1750249306,\n  \"id\": \"chatcmpl-Bjm5Sze3MDV865CbXqwrkvK44cr50\",\n  \"model\": \"gpt-4.1-mini-2025-04-14\",\n  \"object\": \"chat.completion\",\n  \"service_tier\": \"default\",\n  \"system_fingerprint\": \"fp_6f2eabb9a5\",\n  \"usage\": {\n    \"completion_tokens\": 30,\n    \"completion_tokens_details\": {\n      \"accepted_prediction_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"reasoning_tokens\": 0,\n      \"rejected_prediction_tokens\": 0\n    },\n    \"prompt_tokens\": 14,\n    \"prompt_tokens_details\": {\n      \"audio_tokens\": 0,\n      \"cached_tokens\": 0\n    },\n    \"total_tokens\": 44\n  }\n}\n</code></pre>"},{"location":"#observando-alguns-elementos","title":"Observando alguns elementos...","text":"<pre><code>{\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": \"None\",\n      \"message\": {\n        \"annotations\": [],\n        \"content\": \"Claro! Aqui vai uma piada sobre IA: Por que a intelig\u00eancia artificial nunca mente? Porque ela sempre prefere dar respostas *programadas \ud83d\ude04\",\n        \"refusal\": \"None\",\n        \"role\": \"assistant\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"#acessando-a-resposta","title":"Acessando a resposta","text":"main.py<pre><code>import requests\nfrom decouple import config\nfrom pprint import pprint\n\nOPENAI_API_KEY = config('OPENAI_API_KEY')\n\napi_url = 'https://api.openai.com/v1'\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {OPENAI_API_KEY}'\n}\n\ndata = {\n    \"model\": \"gpt-4.1-mini\",\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Me conte uma piada sobre IA\"\n        }\n    ]\n}\ntry:\n\n    resp = requests.post(f'{api_url}/chat/completions', headers=headers, json=data)\n    body = resp.json()\n\n    text = body['choices'][0]['message']['content']\n\n    print(text)\n\nexcept Exception as e:\n    raise print(e)\n</code></pre>"},{"location":"#entendendo-e-implementando-o-recurso-de-chat","title":"Entendendo e implementando o recurso de Chat","text":"<p>Como se fosse recurso de mem\u00f3ria</p> <p>Implementando uma array din\u00e2mica</p> main.py<pre><code>import requests\nfrom decouple import config\nfrom pprint import pprint\n\nOPENAI_API_KEY = config('OPENAI_API_KEY')\n\napi_url = 'https://api.openai.com/v1'\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {OPENAI_API_KEY}'\n}\n\ndata = {\n    \"model\": \"gpt-4.1-mini\",\n    \"messages\": [] # Lista de mensagens vazia\n}\n\nwhile True: # La\u00e7o para simular um chat\n    try:\n\n        user = input('Digite sua pergunta: ') # Primeira mensagem do chat\n\n        data['messages'].append({\"role\": \"user\", \"content\": user}) # Adiciona a mensagem do usu\u00e1rio na lista de mensagens\n\n        resp = requests.post(f'{api_url}/chat/completions', headers=headers, json=data)\n        body = resp.json()\n\n        text = body['choices'][0]['message']['content']\n\n        print(text)\n\n        data['messages'].append({\"role\": \"assistant\", \"content\": text}) # Adiciona a resposta da modelo na lista de mensagens\n\n    except Exception as e:\n        raise print(e)\n</code></pre> <p>O recurso de chat \u00e9 muito \u00fatil para implementa\u00e7\u00e3o de mem\u00f3ria</p>"},{"location":"#definindo-as-instrucoes-de-sistema","title":"Definindo as instru\u00e7\u00f5es de sistema","text":"<p>Come\u00e7ando a modelar a Assistente</p> <ul> <li>Prompt de sistema</li> </ul> <pre><code>Voc\u00ea \u00e9 uma assistente virtual especializada em astrologia, seu nome \u00e9 Estrela Guia \u2728\nSua miss\u00e3o \u00e9 auxiliar o usu\u00e1rio com d\u00favidas sobre astrologia e guiar o usu\u00e1rio no caminho do autoconhecimento\nUtilize uma linguagem emp\u00e1tica e uma escrita acolhedora.\n</code></pre> main.py<pre><code>import requests\nfrom decouple import config\nfrom pprint import pprint\n\nOPENAI_API_KEY = config('OPENAI_API_KEY')\n\napi_url = 'https://api.openai.com/v1'\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {OPENAI_API_KEY}'\n}\n\ndata = {\n    \"model\": \"gpt-4.1-mini\",\n    \"messages\": [\n        {\n            \"role\": \"developer\",\n            \"content\": \"\"\"\nVoc\u00ea \u00e9 uma assistente virtual especializada em astrologia, seu nome \u00e9 Estrela Guia \u2728\nSua miss\u00e3o \u00e9 auxiliar o usu\u00e1rio com d\u00favidas sobre astrologia e guiar o usu\u00e1rio no caminho do autoconhecimento\nUtilize uma linguagem emp\u00e1tica e uma escrita acolhedora.\"\"\"\n        }\n    ]  # Lista de mensagens vazia\n}\n\nwhile True:  # La\u00e7o para simular um chat\n    try:\n\n        user = input('Digite sua pergunta: ')\n\n        # Adiciona a mensagem do usu\u00e1rio na lista de mensagens\n        data['messages'].append({\"role\": \"user\", \"content\": user})\n\n        resp = requests.post(f'{api_url}/chat/completions',\n                             headers=headers, json=data)\n        body = resp.json()\n\n        text = body['choices'][0]['message']['content']\n\n        print(text)\n\n        # Adiciona a resposta da modelo na lista de mensagens\n        data['messages'].append({\"role\": \"assistant\", \"content\": text})\n\n    except Exception as e:\n        raise print(e)\n</code></pre>"},{"location":"#ajustes-de-escrita-a-personalidade","title":"Ajustes de escrita a personalidade","text":"<ul> <li>Molhorando o Prompt de sistema</li> </ul> instructions.txt<pre><code>--8&lt;-- \"instructions.txt\"\n</code></pre> main.py<pre><code>import requests\nfrom decouple import config\nfrom pprint import pprint\n\nOPENAI_API_KEY = config('OPENAI_API_KEY')\n\napi_url = 'https://api.openai.com/v1'\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {OPENAI_API_KEY}'\n}\n\ndata = {\n    \"model\": \"gpt-4.1-mini\",\n    \"messages\": [\n        {\n            \"role\": \"developer\",\n            \"content\": \"\"\n        }\n    ]\n}\n\nwith open('instructions.txt', 'r') as file:\n    instructions = file.read()\n    data['messages'][0]['content'] = instructions\n\nwhile True:  # La\u00e7o para simular um chat\n    try:\n\n        user = input('Digite sua pergunta: ')\n\n        # Adiciona a mensagem do usu\u00e1rio na lista de mensagens\n        data['messages'].append({\"role\": \"user\", \"content\": user})\n\n        resp = requests.post(f'{api_url}/chat/completions',\n                             headers=headers, json=data)\n        body = resp.json()\n\n        text = body['choices'][0]['message']['content']\n\n        print(text)\n\n        # Adiciona a resposta da modelo na lista de mensagens\n        data['messages'].append({\"role\": \"assistant\", \"content\": text})\n\n    except Exception as e:\n        raise print(e)\n</code></pre>"},{"location":"#intruducao-a-tool-calling-chamada-de-funcoes","title":"Intrudu\u00e7\u00e3o a tool calling (Chamada de fun\u00e7\u00f5es)","text":"<p>A chamada de ferramentas refere-se \u00e0 capacidade dos modelos de intelig\u00eancia artificial (IA) de interagir com ferramentas externas, interfaces de programa\u00e7\u00e3o de aplicativos (APIs) ou sistemas para aprimorar suas fun\u00e7\u00f5es.</p> <p>Ela permite que sistemas aut\u00f4nomos concluam tarefas mais complexas acessando e atuando dinamicamente sobre recursos externos e/ou internos.</p> <p>Chamada de ferramentas permitem ao modelo de IA agir buscando informa\u00e7\u00f5es na web em tempo real para otimizar o resultado com dados mais atualizados.</p> <p>What is tool calling?</p> <p>Para configurar uma tool \u00e9 necess\u00e1rio estruturar um objeto JSON contendo as informa\u00e7\u00f5es necess\u00e1rias para identificar a fun\u00e7\u00e3o e seu argumentos, em seguida informar para o modelo que agora ele possu\u00ed uma ferramenta para lidar com uma determinada tarefa.</p>"},{"location":"#exemplo-de-uma-tool","title":"Exemplo de uma tool","text":"<p>Abaixo um objeto JSON contendo uma ferramenta chamada <code>pega_nome</code> contendo a propiedade <code>nome</code> do tipo {++string++}.</p> <pre><code>{\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"pega_nome\",\n        \"description\": \"Pega o nome completo do usu\u00e1rio\", //Gatilho para chamar a fun\u00e7\u00e3o\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"nome\": {\n                    \"type\": \"string\",\n                    \"description\": \"Nome completo do usu\u00e1rio.\"\n                }\n            },\n            \"required\": [\n                \"nome\"\n            ],\n            \"additionalProperties\": False\n        },\n        \"strict\": True\n    }\n}\n</code></pre> <p>Atualizando o arquivo {++main.py++} para informar ao modelo que agora ele tem a ferramenta <code>pega_nome</code> que ser\u00e1 acionada quando o usu\u00e1rio informar o seu nome.</p> main.py<pre><code>import requests\nfrom decouple import config\nfrom pprint import pprint\n\nOPENAI_API_KEY = config('OPENAI_API_KEY')\n\napi_url = 'https://api.openai.com/v1'\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {OPENAI_API_KEY}'\n}\n\ndata = {\n    \"model\": \"gpt-4.1-mini\",\n    \"messages\": [\n        {\n            \"role\": \"developer\",\n            \"content\": \"\"\n        }\n    ],\n    \"tools\": [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"pega_nome\",\n                \"description\": \"Pega o nome completo do usu\u00e1rio\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"nome\": {\n                            \"type\": \"string\",\n                            \"description\": \"Nome completo do usu\u00e1rio.\"\n                        }\n                    },\n                    \"required\": [\n                        \"nome\"\n                    ],\n                    \"additionalProperties\": False\n                },\n                \"strict\": True\n            }\n        }\n    ]\n}\n\nwith open('instructions.txt', 'r') as file:\n    instructions = file.read()\n    data['messages'][0]['content'] = instructions\n\nwhile True:  # La\u00e7o para simular um chat\n    try:\n\n        user = input('Digite sua pergunta: ')\n\n        # Adiciona a mensagem do usu\u00e1rio na lista de mensagens\n        data['messages'].append({\"role\": \"user\", \"content\": user})\n\n        resp = requests.post(f'{api_url}/chat/completions',\n                             headers=headers, json=data)\n        body = resp.json()\n\n        text = body['choices'][0]['message']['content']\n\n        print(text)\n\n        # Adiciona a resposta da modelo na lista de mensagens\n        data['messages'].append({\"role\": \"assistant\", \"content\": text})\n\n    except Exception as e:\n        raise print(e)\n</code></pre> <p>Agora executando o assistente e ap\u00f3s o usu\u00e1rio informar seu nome completo o resultado da vari\u00e1vel <code>text</code> ter\u00e1 um valor nulo. Isso acontece porque a tool foi acionada e agora a resposta do modelo j\u00e1 n\u00e3o \u00e9 mais um texto, agora ele vai retornar instru\u00e7\u00f5es para a execu\u00e7\u00e3o da fun\u00e7\u00e3o <code>pega_nome</code>.</p> <ul> <li>Debugando o retorno</li> </ul> main.py<pre><code>import requests\nfrom decouple import config\nfrom pprint import pprint\n\nOPENAI_API_KEY = config('OPENAI_API_KEY')\n\napi_url = 'https://api.openai.com/v1'\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {OPENAI_API_KEY}'\n}\n\ndata = {\n    \"model\": \"gpt-4.1-mini\",\n    \"messages\": [\n        {\n            \"role\": \"developer\",\n            \"content\": \"\"\n        }\n    ],\n    \"tools\": [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"pega_nome\",\n                \"description\": \"Pega o nome completo do usu\u00e1rio\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"nome\": {\n                            \"type\": \"string\",\n                            \"description\": \"Nome completo do usu\u00e1rio.\"\n                        }\n                    },\n                    \"required\": [\n                        \"nome\"\n                    ],\n                    \"additionalProperties\": False\n                },\n                \"strict\": True\n            }\n        }\n    ]\n}\n\nwith open('instructions.txt', 'r') as file:\n    instructions = file.read()\n    data['messages'][0]['content'] = instructions\n\nwhile True:  # La\u00e7o para simular um chat\n    try:\n\n        user = input('Digite sua pergunta: ')\n\n        # Adiciona a mensagem do usu\u00e1rio na lista de mensagens\n        data['messages'].append({\"role\": \"user\", \"content\": user})\n\n        resp = requests.post(f'{api_url}/chat/completions',\n                             headers=headers, json=data)\n        body = resp.json()\n\n        pprint(body)\n\n        text = body['choices'][0]['message']['content']\n\n\n        # Adiciona a resposta da modelo na lista de mensagens\n        data['messages'].append({\"role\": \"assistant\", \"content\": text})\n\n    except Exception as e:\n        raise print(e)\n</code></pre> <ul> <li>Analisando a resposta:</li> </ul> <pre><code>{\n  \"choices\": [\n    {\n      \"finish_reason\": \"tool_calls\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"message\": {\n        \"annotations\": [],\n        \"content\": null,\n        \"refusal\": null,\n        \"role\": \"assistant\",\n        \"tool_calls\": [\n          {\n            \"function\": {\n              \"arguments\": \"{'nome':'thalyson wilker'}\",\n              \"name\": \"pega_nome\"\n            },\n            \"id\": \"call_tAmS4qkZo2FAsAOrRwon6qu1\",\n            \"type\": \"function\"\n          }\n        ]\n      }\n    }\n  ]\n}\n</code></pre> <p>Corrigindo o arquivo {++main.py++}</p> main.py<pre><code>import requests\nfrom decouple import config\nfrom pprint import pprint\nimport json\n\nOPENAI_API_KEY = config('OPENAI_API_KEY')\n\napi_url = 'https://api.openai.com/v1'\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {OPENAI_API_KEY}'\n}\n\ndata = {\n    \"model\": \"gpt-4.1-mini\",\n    \"messages\": [\n        {\n            \"role\": \"developer\",\n            \"content\": \"\"\n        }\n    ],\n    \"tools\": [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"pega_nome\",\n                \"description\": \"Pega o nome completo do usu\u00e1rio\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"nome\": {\n                            \"type\": \"string\",\n                            \"description\": \"Nome completo do usu\u00e1rio.\"\n                        }\n                    },\n                    \"required\": [\n                        \"nome\"\n                    ],\n                    \"additionalProperties\": False\n                },\n                \"strict\": True\n            }\n        }\n    ]\n}\n\nwith open('instructions.txt', 'r') as file:\n    instructions = file.read()\n    data['messages'][0]['content'] = instructions\n\nwhile True:  # La\u00e7o para simular um chat\n    try:\n\n        user = input('Digite sua pergunta: ')\n\n        # Adiciona a mensagem do usu\u00e1rio na lista de mensagens\n        data['messages'].append({\"role\": \"user\", \"content\": user})\n\n        resp = requests.post(f'{api_url}/chat/completions',\n                             headers=headers, json=data)\n        body = resp.json()\n\n        tool_calls = body['choices'][0]['message'].get(\"tool_calls\")\n\n        if(tool_calls):\n            function_name = tool_calls[0]['function']['name']\n            function_args = json.loads(tool_calls[0]['function']['arguments'])\n            if(function_name == 'pega_nome'):\n                print(\"Simulando a manipula\u00e7\u00e3o do nome...\")\n                nome = function_args['nome'].upper()\n                text = f\"Ol\u00e1: {nome}! Seja bem vindo! Em que posso ser \u00fatil hoje?\"\n\n        else:\n            text = body['choices'][0]['message']['content']\n\n        print(text)\n\n        # Adiciona a resposta da modelo na lista de mensagens\n        data['messages'].append({\"role\": \"assistant\", \"content\": text})\n\n    except Exception as e:\n        raise print(e)\n</code></pre>"},{"location":"#introducao-ao-web-scraping","title":"Introdu\u00e7\u00e3o ao Web Scraping","text":"<p>Web Scraping ou raspagem web \u00e9 o precesso de \"raspagem\" de dados de p\u00e1ginas na internet. Scripts s\u00e3o codificados para acessar p\u00e1ginas web, analisar a estrura a sua HTML, localizar e extrair dados diversos para objetivos diversos, como coletar de dados para an\u00e1lise posteriores, monitorar informa\u00e7\u00f5es e pre\u00e7os de prudutos etc...</p> <p>A t\u00e9cnica comum e amplamente utilizada por programadores de v\u00e1rios n\u00edveis.</p>"},{"location":"#beautiful-soup","title":"Beautiful Soup","text":"<p>Beautiful Soup</p> <p>Carregar o HTML da p\u00e1gina</p> web_scraping.py<pre><code>import requests\nfrom bs4 import BeautifulSoup as soup\n\nresp = requests.get(\"https://www.horoscopovirtual.com.br/horoscopo/libra\")\nhtml = soup(resp.text, 'html.parser')\n</code></pre> <p>Analisar a estrutura HTML e localizar a data do hor\u00f3scopo</p> web_scraping.py<pre><code>import requests\nfrom bs4 import BeautifulSoup as soup\n\nresp = requests.get(\"https://www.horoscopovirtual.com.br/horoscopo/libra\")\n\nhtml = soup(resp.text, 'html.parser')\n\nhoje = html.find('div', attrs={'class': 'days-wrapper'})\nhoje = hoje.find('p')\nhoje = hoje.text\n\nprint(hoje)\n</code></pre> <p>Analisar a estrutura HTML, localizar a data e o hor\u00f3scopo</p> web_scraping.py<pre><code>import requests\nfrom bs4 import BeautifulSoup as soup\n\nresp = requests.get(\"https://www.horoscopovirtual.com.br/horoscopo/libra\")\n\nhtml = soup(resp.text, 'html.parser')\n\nhoje_div= html.find('div', attrs={'class': 'days-wrapper'})\nhoje = hoje_div.find('p')\nhoje = hoje.text\n\nhoroscopo_div = html.find('p', attrs={'class': 'text-pred'})\nhoroscopo = horoscopo_div.text.strip()\n\nprint(hoje, horoscopo)\n</code></pre>"},{"location":"#raspando-dados-de-horoscopo","title":"Raspando dados de hor\u00f3scopo","text":""},{"location":"#configurando-a-tool-busca-de-horoscopo","title":"Configurando a tool busca de hor\u00f3scopo","text":"<pre><code>{\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"busca_horoscopo\",\n        \"description\": \"Fun\u00e7\u00e3o para buscar o hor\u00f3scopo do usu\u00e1rio quando solicitado\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"signo\": {\n                    \"type\": \"string\",\n                    \"description\": \"Signo do usu\u00e1rio, deve ser no formato minusc\u00falo sem acentu\u00e7\u00e3o. Ex: \u00c1ries, G\u00eameos. Deve ficar: aries, gemeos\"\n                }\n            },\n            \"required\": [\n                \"signo\"\n            ],\n            \"additionalProperties\": False\n        },\n        \"strict\": True\n    }\n}\n</code></pre>"},{"location":"#finalizando-a-tool-de-horoscopo-com-busca-na-web-em-tempo-real","title":"Finalizando a tool de hor\u00f3scopo com busca na web em tempo real","text":""},{"location":"#configurando-a-raspagem-de-dados","title":"configurando a raspagem de dados","text":""},{"location":"#atualizando-o-mainpy","title":"Atualizando o main.py","text":""},{"location":"#finalizando-o-assistente","title":"Finalizando o assistente","text":""},{"location":"#empacotando-tudo","title":"Empacotando tudo","text":""},{"location":"#ferramentas-open-source","title":"Ferramentas Open Source","text":"<p>Projetos brasileiros relacionados que podem complementar ou inspirar:</p> <ul> <li>ClientAI - Cliente Python para APIs de IA</li> <li>ProsaAI - Biblioteca para processamento de linguagem natural</li> <li>Langflow - Interface visual para cria\u00e7\u00e3o de fluxos de LLM</li> </ul>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<ul> <li>Python Requests: HTTP for Humans</li> <li>Beautiful Soup</li> <li>Python Decouple</li> <li>Developer quickstart: Take your first steps with the OpenAI API</li> <li>Text generation and prompting</li> <li>Using tools</li> <li>Function calling</li> </ul> <p>https://www.ibm.com/think/topics/tool-calling</p>"}]}